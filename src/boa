#!/usr/bin/env bash

# Copyright (c) 2025 MLS Tidbits <contact@mlstidbits.com> All rights reserved.

function print-info () {

    case "$1" in
        info) echo -e "\e[32m[INFO]\e[0m $_2" ;;
        warn) echo -e "\e[33m[WARN]\e[0m $_2" ;;
        err ) echo -e "\e[31m[ERROR]\e[0m $_2" ; exit 1 ;;
        *   ) echo -e "\e[32m[INFO]\e[0m $_1" ;;
    esac

}

function generateChangelog () {

    # Get the list of unique commit dates in reverse chronological order
    _commitDates=$(git log --date=short --pretty=format:'%ad' | sort -ur)
    _fistCommitDate=$(git log --date=short --pretty=format:'%ad' | tail -n 1)

    _changelogFile="debian/changelog"

    _changelogIteration="$(yq '.changelog.iteration' boa.yaml | tr -d '"')"
    _changelogUrgency="$(yq '.changelog.urgency' boa.yaml | tr -d '"')"

    if test -f "$_changelogFile" ; then rm -f "$_changelogFile" ; fi

    # Iterate over each date # 2089492222
    for d in $_commitDates; do

        _gitBranch=$(git rev-parse --abbrev-ref HEAD)

        # Check if the branch is for development/testing or main branch.
        case "$_gitBranch" in
            main|master|stable|release|production ) _releaseType="stable"   ;;
            dev|development|unstable|testing      ) _releaseType="unstable" ;;
            *                                     ) _releaseType="stable"   ;;
        esac

        # Get the list of commits for the current date
        _commits=$(git log "${_gitBranch}" --since="$d 00:00" --until="$d 23:59" --pretty=format:'%h')

        test -n "$_commits" || _commits=$(git log --since="$d 00:00" --pretty=format:'%h')

        # Get the author name and email from the latest commit of the day
        _latestCommit=$(echo "$_commits" | head -n 1)
        _authorName=$(git log -1 --format='%an' "$_latestCommit")
        _authorEmail=$(git log -1 --format='%ae' "$_latestCommit")

        # Count the number of commits and reverse the order
        mapfile -t commitCount < <(git rev-list HEAD --since="$_fistCommitDate" --until="$d 23:59")

        _major=0 ; _minor=0 ; _patch=0

        for ((i=0; i<${#commitCount[@]}; i++)); do
            _patch=$(( _patch + 1 ))
            (( _patch == _changelogIteration )) && { _patch=0 ; _minor=$(( _minor + 1 )) ; }
            (( _minor == _changelogIteration )) && { _minor=0 ; _major=$(( _major + 1 )) ; }
        done

        versionCode="${_major}.${_minor}.${_patch}"

        # Format the date for the changelog entry
        _changelogDate=$(date -d "$d" '+%a, %d %b %Y')

        # Start the changelog entry
        {

            echo "${_packageName} (${versionCode}) ${_releaseType}; urgency=$_changelogUrgency"
            echo ""

            # Add each commit message to the changelog entry
            for commit in $_commits; do
                _commitMessage=$(git log -1 --pretty=format:'%s' "$commit")
                echo "  * $_commitMessage"
            done

            # End the changelog entry
            echo ""
            echo " -- ${_authorName} <${_authorEmail}>  ${_changelogDate} 00:00:00 +0000"
            echo ""

        } | tee -a "$_changelogFile" > /dev/null

        # Amend the version number to the version file int the root directory
    done

    _currentVersion=$(grep -oP '(?<=\()\d+\.\d+\.\d+(?=\))' "$_changelogFile" | head -n 1)

    echo "${_currentVersion}" | tee doc/version > /dev/null

}

set -euo pipefail

_appName="boa"
_appVersion=$(cat /usr/share/doc/boa/version 2> /dev/null || echo "unknown")

# Verify that the boa.yaml file exists and is in the correct format
test -f "boa.yaml" || print-info "err" "boa.yaml file not found!"

_format="$(yq '.format' boa.yaml | tr -d '"')"
[ "$_format" = "yaml" ] || print-info "err" "Invalid format specified in boa.yaml!"

_packageName="$(yq '.application' boa.yaml | tr -d '"')"
[ -n "$_packageName" ] || print-info "err" "Application name not specified in boa.yaml!"

[[ -z "$1" ]] && boa build

case "$1" in
    clean               )
        rm -rf debian/{.debhelper,*.substvars,debian/"$_packageName",debian/$_packageName-*} \
        debian/file
        exit 0
    ;;
    build              ) ;;
    *                  ) ;;
esac

_cmd="dpkg-buildpackage"

_build="$(yq '.build' boa.yaml | tr -d '"')"

case "$_build" in
    source|binary|source,binary ) _cmd+=" --build=$_build" ;;
    *) echo "Error: Invalid build type specified in boa.yaml!" ; exit 1 ;;
esac

_noPreClean="$(yq '.no_pre_clean' boa.yaml | tr -d '"')"

[ "$_noPreClean" = "true" ] && _cmd+=" --no-pre-clean"
[ "$_noPreClean" = "false" ] && _cmd+=" --pre-clean"

_noPostClean="$(yq '.no_post_clean' boa.yaml | tr -d '"')"

[ "$_noPostClean" = "true" ] && _cmd+=" --no-post-clean"
[ "$_noPostClean" = "false" ] && _cmd+=" --post-clean"

_checkBuildDeps="$(yq '.check_builddeps' boa.yaml | tr -d '"')"

[ "$_checkBuildDeps" = "true" ] && _cmd+=" --check-builddeps"

# Verify that the jobs value is valid
_jobs="$(yq '.jobs' boa.yaml | tr -d '"')"
case "$_jobs" in
    auto                        ) _cmd+=" --jobs=$_jobs" ;;
    [0-9]*[0-9]                 )
        test "$_jobs" -gt "$(nproc --all)" &&
        print-info "warn" "Jobs value exceeds available CPU/Threads!"
        _cmd+=" --jobs=$_jobs"
    ;;
    *                           )
        test "$_jobs" -ge 1 ||
        print-info "warn" "Invalid jobs value specified in boa.yaml!"
    ;;
esac

if [ "$(yq '.sign.enable' boa.yaml | tr -d '"')" = "false" ]; then
    _cmd+=" --no-sign"
elif [ "$(yq '.sign.enable' boa.yaml | tr -d '"')" = "true" ]; then
    _signBackend="$(yq '.sign.backend' boa.yaml | tr -d '"')"
    case "$_signBackend" in
        sop|sq|gpg              ) _cmd+=" --sign-backend=$_signBackend" ;;
        auto                    ) ;;
        *                       )
            echo "Error: Invalid sign backend specified in boa.yaml!" ; exit 1
        ;;
    esac

    _signKeyID="$(yq '.sign.keyid' boa.yaml | tr -d '"')"
    [ -n "$_signKeyID" ] && _cmd+=" --sign-keyid=$_signKeyID"

    _signPause="$(yq '.sign.pause' boa.yaml | tr -d '"')"
    [ "$_signPause" = "true" ] && _cmd+=" --sign-pause"
fi

test "$(yq '.changelog.enable' boa.yaml | tr -d '"')" = "true" && generateChangelog "$@"

eval "$_cmd" # Execute the build command

print-info "info" "$_appName v$_appVersion build process completed!"

exit 0
